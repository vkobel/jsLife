// Generated by CoffeeScript 1.7.1
(function() {
  var Canvas, GameLoop, Grid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Canvas = (function() {
    function Canvas(name) {
      this.elem = document.getElementById(name);
      this.ctx = this.elem.getContext("2d");
      this.width = this.elem.width;
      this.height = this.elem.height;
    }

    Canvas.prototype.draw = function(x, y, sizeX, sizeY, color) {
      this.ctx.fillStyle = color;
      return this.ctx.fillRect(x, y, sizeX, sizeY);
    };

    Canvas.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.width, this.height);
    };

    return Canvas;

  })();

  Grid = (function(_super) {
    __extends(Grid, _super);

    function Grid(name, sizeX, sizeY) {
      this.sizeX = sizeX;
      this.sizeY = sizeY;
      Grid.__super__.constructor.call(this, name);
      this.activeCells = {};
      this.potentialStateChanging = {};
      this.counter = 0;
    }

    Grid.prototype.keyFromCoords = function(x, y) {
      return (parseInt(x) << 16) + parseInt(y);
    };

    Grid.prototype.coordsFromKey = function(key) {
      return [key >> 16, key & 0xFFFF];
    };

    Grid.prototype.draw = function(x, y, color) {
      return Grid.__super__.draw.call(this, x * this.sizeX, y * this.sizeY, this.sizeX, this.sizeY, color != null ? color : "#111");
    };

    Grid.prototype.buildPotentialStateChanging = function() {
      var akey, ax, ay, coords, key, weight, _results;
      this.potentialStateChanging = {};
      _results = [];
      for (key in this.activeCells) {
        coords = this.coordsFromKey(key);
        _results.push((function() {
          var _i, _len, _ref, _ref1, _results1;
          _ref = this.getAdjacentCoords(coords, true);
          _results1 = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _ref1 = _ref[_i], ax = _ref1[0], ay = _ref1[1];
            akey = this.keyFromCoords(ax, ay);
            if (this.potentialStateChanging[akey] != null) {
              _results1.push(weight = ++this.potentialStateChanging[akey]);
            } else {
              _results1.push(this.potentialStateChanging[akey] = 1);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Grid.prototype.live = function(x, y) {
      this.draw(x, y, "#FAB23E");
      return this.activeCells[this.keyFromCoords(x, y)] = true;
    };

    Grid.prototype.die = function(x, y) {
      this.draw(x, y, "#111");
      return delete this.activeCells[this.keyFromCoords(x, y)];
    };

    Grid.prototype.isAlive = function(matrix, key) {
      return matrix[key] != null;
    };

    Grid.prototype.neighboursCount = function(matrix, x, y) {
      var ax, ay, nb, _i, _len, _ref, _ref1;
      nb = 0;
      _ref = this.getAdjacentCoords([x, y], false);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], ax = _ref1[0], ay = _ref1[1];
        if (matrix[this.keyFromCoords(ax, ay)] != null) {
          nb++;
        }
      }
      return nb;
    };

    Grid.prototype.getAdjacentCoords = function(coords, itself) {
      if (itself === true) {
        return [[coords[0] - 1, coords[1] - 1], [coords[0], coords[1] - 1], [coords[0] + 1, coords[1] - 1], [coords[0] - 1, coords[1]], [coords[0], coords[1]], [coords[0] + 1, coords[1]], [coords[0] - 1, coords[1] + 1], [coords[0], coords[1] + 1], [coords[0] + 1, coords[1] + 1]];
      } else {
        return [[coords[0] - 1, coords[1] - 1], [coords[0], coords[1] - 1], [coords[0] + 1, coords[1] - 1], [coords[0] - 1, coords[1]], [coords[0] + 1, coords[1]], [coords[0] - 1, coords[1] + 1], [coords[0], coords[1] + 1], [coords[0] + 1, coords[1] + 1]];
      }
    };

    return Grid;

  })(Canvas);

  GameLoop = (function() {
    function GameLoop(fps, grid) {
      this.grid = grid;
      this.compute = __bind(this.compute, this);
      this.dur = 1000 / fps;
    }

    GameLoop.prototype.compute = function() {
      var count, key, tmp, weight, x, y, _ref, _ref1, _results;
      this.grid.buildPotentialStateChanging();
      tmp = $.extend({}, this.grid.activeCells);
      _ref = this.grid.potentialStateChanging;
      _results = [];
      for (key in _ref) {
        weight = _ref[key];
        _ref1 = this.grid.coordsFromKey(key), x = _ref1[0], y = _ref1[1];
        count = this.grid.neighboursCount(tmp, x, y);
        if (this.grid.isAlive(tmp, key)) {
          if (count < 2) {
            this.grid.die(x, y);
          }
          if (count === 2 || count === 3) {
            this.grid.live(x, y);
          }
          if (count > 3) {
            _results.push(this.grid.die(x, y));
          } else {
            _results.push(void 0);
          }
        } else {
          if (count === 3) {
            _results.push(this.grid.live(x, y));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    GameLoop.prototype.start = function() {
      return window.setInterval(this.compute, this.dur);
    };

    return GameLoop;

  })();

  $(function() {
    var game, grid;
    grid = new Grid("screen", 2, 2);
    grid.live(5, 5);
    grid.live(5, 6);
    grid.live(5, 7);
    grid.live(4, 7);
    grid.live(3, 6);
    grid.live(4, 7);
    grid.live(95, 98);
    grid.live(96, 98);
    grid.live(97, 98);
    game = new GameLoop(5000, grid);
    return game.start();
  });

}).call(this);
